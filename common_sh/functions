mo_to_gif() {
  ffmpeg -i "$1" -r 10 "$2"
}

memo() {
  EXT='.adoc'
  WORK_LOG_BASE_PATH="$HOME/work/work_log"
  YEAR=$(date +'%Y')
  WORK_LOG_PATH="$WORK_LOG_BASE_PATH/$YEAR"
  # 書き込む年のディレクトリが存在しなければ作成する
  if ! [ -e "$WORK_LOG_PATH" ]; then
    mkdir -p "$WORK_LOG_PATH"
  fi

  # 引数が存在しなければ今日の日付のみでファイルを作成、編集する
  if [ -z $1 ]; then
    echo "$WORK_LOG_PATH/$(date +'%m-%d')$EXT"
  else
    echo "$WORK_LOG_PATH/$(date +'%m-%d')-$1$EXT"
  fi
}

PORTABLE_DEV_ENV='portable_dev_env'

dev_env_init() {
  cp -r "$HOME/dotfiles/$PORTABLE_DEV_ENV" ./
}

dev_env_setup() {
   PROJECT_NAME=$(basename $(pwd))
   cd $PORTABLE_DEV_ENV && PROJECT_NAME=$PROJECT_NAME docker-compose build --no-cache && cd -
}

dev_env_up() {
   PROJECT_NAME=$(basename $(pwd))
   cd $PORTABLE_DEV_ENV && PROJECT_NAME=$PROJECT_NAME docker-compose up -d && cd -
}

dev_env_attach() {
   PROJECT_NAME=$(basename $(pwd))
   echo "$PROJECT_NAME"_dev_env_container
   docker exec -it "$PROJECT_NAME"_dev_env_container /bin/bash
}

dev_env_clean() {
  PROJECT_NAME=$(basename $(pwd))
  cd $PORTABLE_DEV_ENV && PROJECT_NAME=$PROJECT_NAME docker-compose down --rmi all -v && cd -
  rm -rf ./$PORTABLE_DEV_ENV
}

load_anyenv() {
  for env in $(ls $HOME/.anyenv/envs); do
    export PATH="$HOME/.anyenv/envs/$env/shims/:$PATH"
    export PATH="$HOME/.anyenv/envs/$env/bin:$PATH"
  done
  eval "$(anyenv init -)"
  eval "$(goenv init -)"
  eval "$(pyenv init -)"
  eval "$(direnv hook bash)"
}

carun() {
  cargo run $1
}

set_tmux_env() {
  tmux setenv $1 $2 && eval $(tmux showenv $1)
}

make_vim_settings() {
  mkdir -p ./.SpaceVim.d/autoload
  snip_path='.SpaceVim.d/snippets'
  init_toml_path='.SpaceVim.d/init.toml'
  autoload_init_path='.SpaceVim.d/autoload/init.vim'
  autoload_before_path='.SpaceVim.d/autoload/before.vim'
  autoload_after_path='.SpaceVim.d/autoload/after.vim'
  autoload_pj_before_path='.SpaceVim.d/autoload/project_before.vim'
  autoload_pj_after_path='.SpaceVim.d/autoload/project_after.vim'

  ln -sfn $HOME/dotfiles/$autoload_init_path "$(pwd)/$autoload_init_path"
  ln -sfn $HOME/dotfiles/$autoload_before_path "$(pwd)/$autoload_before_path"
  ln -sfn $HOME/dotfiles/$autoload_after_path "$(pwd)/$autoload_after_path"

  cp -r $HOME/dotfiles/$snip_path "$(pwd)/.SpaceVim.d"
  cp $HOME/dotfiles/$init_toml_path "$(pwd)/$init_toml_path"
  cp $HOME/dotfiles/.SpaceVim.d/sample_tasks.toml "$(pwd)/.SpaceVim.d"
  cp $HOME/dotfiles/$autoload_pj_before_path "$(pwd)/$autoload_pj_before_path"
  cp $HOME/dotfiles/$autoload_pj_after_path "$(pwd)/$autoload_pj_after_path"
}

clean_vim_settings() {
  rm -rf ./.SpaceVim.d
}

git_init() {
  git init
  git commit --allow-empty -m 'Initial Commit'
}

split_tmux_pane() {
  cwd="`tmux display -p \"#{pane_current_path}\"`"
  tmux select-pane -t "bottom-right"
  if ! [ -z "$IN_NIX_SHELL" ]; then
    tmux split-pane -c "$cwd" "nix-shell --run zsh"
  else
    tmux split-pane -c "$cwd"
  fi
}

set_project_nix() {
  echo 'use_nix' >> ./.envrc
  touch ./default.nix
}

mkpk() {
  mkdir $1
  echo "package $1" >> "$1/$1.go"
}
